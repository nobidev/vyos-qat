#!/bin/bash
#################################################################
#
# This file is provided under a dual BSD/GPLv2 license.  When using or
#   redistributing this file, you may do so under either license.
# 
#   GPL LICENSE SUMMARY
# 
#   Copyright(c) 2007-2023 Intel Corporation. All rights reserved.
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of version 2 of the GNU General Public License as
#   published by the Free Software Foundation.
# 
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
# 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
#   The full GNU General Public License is included in this distribution
#   in the file called LICENSE.GPL.
# 
#   Contact Information:
#   Intel Corporation
# 
#   BSD LICENSE
# 
#   Copyright(c) 2007-2023 Intel Corporation. All rights reserved.
#   All rights reserved.
# 
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions
#   are met:
# 
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#     * Neither the name of Intel Corporation nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
# 
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# 
#  version: QAT.L.4.24.0-00005
#
#################################################################

QAT_DBG_DMN_PATH=/usr/sbin/qat_dbg_sync_daemon
QAT_SYS_PATH=/sys/kernel/debug

QAT_MAX_TERM_RETRY=5
QAT_SLEEP_RETRY=0.1

Usage()
{
    echo
    echo --------------------------------------------------------
    echo USAGE:
    echo --------------------------------------------------------
    echo "#  $0 start||stop||status||restart"
    echo --------------------------------------------------------
    echo " To see QAT debuggability configuration in the system use:"
    echo " $0 status"
    echo " To start QAT debuggability synchronization daemon use:"
    echo " $0 start"
    echo " To terminate QAT debuggability synchronization daemon use:"
    echo " $0 stop"
    echo " To restart QAT debuggability synchronization daemon use:"
    echo " $0 restart"
    echo --------------------------------------------------------
    exit 1
}

TerminateSyncDaemon()
{
    local -i attempt=0
    local dmn_name

    dmn_name=$(basename ${QAT_DBG_DMN_PATH})
    if [ -z ${dmn_name} ]; then
        exit 1
    fi

    # Term loop
    while [ ${attempt} -lt ${QAT_MAX_TERM_RETRY} ]; do
        pidof -x ${dmn_name} 2> /dev/null | xargs kill -TERM 2> /dev/null
        if [ $? -ne 0 ]; then
            break
        fi
        sleep $QAT_SLEEP_RETRY
        ((attempt = attempt + 1))
    done

    # Check if there is any dbg daemon instance running
    pidof -x ${dmn_name} > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        # Kill loop
        attempt=0
        while [ ${attempt} -lt ${QAT_MAX_TERM_RETRY} ]; do
            pidof -x ${dmn_name} 2> /dev/null | xargs kill -KILL 2> /dev/null
            if [ $? -ne 0 ]; then
                break
            fi
            sleep $QAT_SLEEP_RETRY
            ((attempt = attempt + 1))
        done
    fi

    # Check if there is any dbg daemon instance running
    pidof -x ${dmn_name} > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "Unable to terminate QAT debuggability sync daemon"
        exit 1
    fi
}

GetNoOfDbgDevices()
{
    local -i dbg_on_ctr=0

    dbg_cfg_dirs=($(find ${QAT_SYS_PATH} -name qat_debug))
    for dbg_cfg_dir in ${dbg_cfg_dirs[@]}; do
        if [[ ! -d ${dbg_cfg_dir} ]]; then
            continue
        fi
        val=$(cat "${dbg_cfg_dir}/enabled" 2> /dev/null | tr -d '\0')
        if [[ $? -ne 0 ]]; then
            continue
        fi
        if [[ ${val} == "1" ]]; then
            ((dbg_on_ctr = dbg_on_ctr + 1))
        fi
    done

    echo ${dbg_on_ctr}
}

StartSyncDaemon()
{
    local dbg_devices

    # Get number of devices configured with debuggability
    dbg_devices=$(GetNoOfDbgDevices)
    if [[ ${dbg_devices} -gt 0 ]]; then
        if [[ ! -f ${QAT_DBG_DMN_PATH} ]]; then
            echo "QAT debuggability synchronization daemon not installed"
            exit 1
        fi
        ${QAT_DBG_DMN_PATH} > /dev/null 2>&1
        if [[ $? -ne 0 ]]; then
            echo "QAT debuggability synchronization daemon start failed"
            exit 1
        fi
    else
        echo "No device configured with debuggability - starting daemon skipped"
        exit 1
    fi
}

PrintStatus()
{
    local dmn_name
    local dmn_pid
    local -i dbg_on_ctr=0

    # Print which devices are configured with dbg turned on
    echo "QAT debuggability configuration: "
    dbg_cfg_dirs=($(find ${QAT_SYS_PATH} -name qat_debug))
    for dbg_cfg_dir in ${dbg_cfg_dirs[@]}; do
        if [[ ! -d ${dbg_cfg_dir} ]]; then
            continue
        fi

        val=$(cat "${dbg_cfg_dir}/enabled" 2> /dev/null | tr -d '\0')
        if [[ $? -ne 0 ]]; then
            continue
        fi

        if [[ ! ${val} == "1" ]]; then
            continue
        fi

        dev_name=$(basename $(dirname ${dbg_cfg_dir}))
        if [ -z ${dev_name} ]; then
            continue
        fi

        echo -e "\tDevice: ${dev_name}"

        level=$(cat ${dbg_cfg_dir}/level 2> /dev/null | tr -d '\0')
        dump_dir=$(cat ${dbg_cfg_dir}/dump_dir 2> /dev/null | tr -d '\0')
        dump_dir_size=$(cat ${dbg_cfg_dir}/dump_dir_size_mb 2> /dev/null | tr -d '\0')
        buffer_pool_size=$(cat ${dbg_cfg_dir}/buffer_pool_size 2> /dev/null | tr -d '\0')
        buffer_size_mb=$(cat ${dbg_cfg_dir}/buffer_size_mb 2> /dev/null | tr -d '\0')
        dump_on_process_crash=$(cat ${dbg_cfg_dir}/dump_on_process_crash 2> /dev/null | tr -d '\0')
        cont_sync_enabled=$(cat ${dbg_cfg_dir}/cont_sync_enabled 2> /dev/null | tr -d '\0')
        cont_sync_dir=$(cat ${dbg_cfg_dir}/cont_sync_dir 2> /dev/null | tr -d '\0')
        cont_sync_max_files=$(cat ${dbg_cfg_dir}/cont_sync_max_files 2> /dev/null | tr -d '\0')
        cont_sync_max_file_size_mb=$(cat ${dbg_cfg_dir}/cont_sync_max_file_size_mb 2> /dev/null | tr -d '\0')

        echo -e "\t\tDebug level: ${level}"
        echo -e "\t\tBuffer pool size: ${buffer_pool_size}"
        echo -e "\t\tBuffer size in MB: ${buffer_size_mb}"
        echo -e "\t\tCrash dump on client process:" \
            "${dump_on_process_crash}"

        if [[ ${cont_sync_enabled} =~ "1" ]]; then
            echo -e "\t\tSynchronization mode: cont-sync"
            echo -e "\t\tCont-sync directory: ${cont_sync_dir}"
            echo -e "\t\tMax number of cont-sync log files ${cont_sync_max_files}"
            echo -e "\t\tMax size of cont-sync log file: ${cont_sync_max_file_size_mb}"
        else
            echo -e "\t\tSynchronization mode: dump on crash"
            echo -e "\t\tCrash dump directory: ${dump_dir}"
            echo -e "\t\tCrash dump directory max size in MB: ${dump_dir_size}"
        fi
        ((dbg_on_ctr = dbg_on_ctr + 1))
    done

    if ((dbg_on_ctr == 0)); then
        echo -e "\tNo QAT devices configured with debuggability"
    fi

    dmn_name=$(basename ${QAT_DBG_DMN_PATH})
    if [ -z ${dmn_name} ]; then
        exit 1
    fi

    # Get QAT dbg sync daemon pid
    dmn_pid=$(pidof -x ${dmn_name} 2> /dev/null)
    if [ $? -eq 0 ]; then
        echo "QAT debuggability synchronization daemon running. Pid:"
        echo -e "\t${dmn_pid}"
    else
        echo "QAT debuggability synchronization daemon not running."
    fi
}

case $1 in
    Start | start)
        TerminateSyncDaemon
        StartSyncDaemon
        PrintStatus
        ;;

    Stop | stop)
        TerminateSyncDaemon
        PrintStatus
        ;;

    Restart | restart)
        TerminateSyncDaemon
        StartSyncDaemon
        PrintStatus
        ;;

    Status | status)
        PrintStatus
        ;;

    *)
        Usage
        ;;
esac

exit 0
