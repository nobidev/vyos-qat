/****************************************************************************
 *
 * This file is provided under a dual BSD/GPLv2 license.  When using or
 *   redistributing this file, you may do so under either license.
 * 
 *   GPL LICENSE SUMMARY
 * 
 *   Copyright(c) 2007-2023 Intel Corporation. All rights reserved.
 * 
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of version 2 of the GNU General Public License as
 *   published by the Free Software Foundation.
 * 
 *   This program is distributed in the hope that it will be useful, but
 *   WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *   General Public License for more details.
 * 
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
 *   The full GNU General Public License is included in this distribution
 *   in the file called LICENSE.GPL.
 * 
 *   Contact Information:
 *   Intel Corporation
 * 
 *   BSD LICENSE
 * 
 *   Copyright(c) 2007-2023 Intel Corporation. All rights reserved.
 *   All rights reserved.
 * 
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions
 *   are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in
 *       the documentation and/or other materials provided with the
 *       distribution.
 *     * Neither the name of Intel Corporation nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 * 
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * 
 *  version: QAT.L.4.24.0-00005
 *
 ****************************************************************************/

==============================================================================


Debuggability overview
====================
qat_dbg_report tool is intended to print collected QAT traffic and perform
audits on collected data to find root cause of issues that occurred.

Enable Debuggability feature
===========================
Debuggability feature is supported for cryptographic and compression services
used via Traditional and Data Plane API. To enable it, follow the steps below:
    * Install driver package configured with --enable-icp-debug flag
    * Configure and enable in the feature in [DEBUG] section of QAT device
      configuration file
    * Perform qat_service shutdown and qat_service start
    * Check if the persistent storage daemon is running for configured devices
      using `qat_dbg_ctl status` command

Report Tool commands
====================
Report tool executable is available in $ICP_ROOT/build/qat_dbg_report after
the package is built and installed using ./configure; make install commands.

Below are listed commands used to manage collected traffic using the tool:

        Print all collected traffic:
            ./qat_dbg_report path=<path> command=list dev=<dev>
                                                     |bdf=<bdf>
        Perform physical addresses audit to check if physical addresses used in
        requests were mapped to caller process:
            ./qat_dbg_report path=<path> command=audit_phy_addresses dev=<dev>
                                                                    |bdf=<bdf>
        Print responses (and matched requests) which status code is other
        than 0:
            ./qat_dbg_report path=<path> command=audit_ret_codes dev=<dev>
                                                                |bdf=<bdf>
        Print requests which have invalid length fields:
            ./qat_dbg_report path=<path> command=audit_fields_lengths dev=<dev>
                                                                     |bdf=<bdf>
        Print last <n> entries:
            ./qat_dbg_report path=<path> command=list last=<n> dev=<dev>
                                                              |bdf=<bdf>

Options:
      path  Directory where collected traffic is stored. This may be value of
            <ContSyncLogDir> or sub path of <LogDir> taken from QAT device
            configuration file. To distinguish the collected traffic data
            source between crash dump (<LogDir>) and continuous sync mode
            (<ContSyncLogDir>) the <dev> parameter is used in the following
            manner: when `dev` parameter is present, the qat_report_tool
            assumes continuous sync traffic data source. Otherwise then crash
            dump mode is assumed and device number <dev> is read automatically
            from the given path.
      dev   QAT device number in the manner as they are numbered by adf_ctl
      bdf   PCI domain with Bus Device Function identifier of QAT device
            in format XXXX:BB:DD.F or XXXX_BB_DD_F
      n     Maximum number of last several packets to display

Deamon
====================
Daemon is a user space process responsible for writing collected traffic and
related additional data to persistent storage. Daemon life cycle is managed by
tool named qat_dbg_ctl, located at $ICP_ROOT/build/qat_dbg_ctl.

Below are listed commands used for the daemon management:

        Start daemon process:
            qat_dbg_ctl start
        Stop daemon process:
            qat_dbg_ctl stop
        Restart daemon:
            qat_dbg_ctl restart
        Show daemon status and Debuggability configuration for each QAT device
        with this feature enabled:
            qat_dbg_ctl status

NOTES:
      1. Daemon is automatically started during QAT device starting via adf_ctl
         / qat_service when at least one device has been configured with
         Debuggability feature enabled
      2. Daemon is automatically stopped during QAT device stopping via adf_ctl
         / qat_service
      3. Daemon is logging information and error messages to syslog

Legal/Disclaimers
===================
INFORMATION IN THIS DOCUMENT IS PROVIDED IN CONNECTION WITH INTEL(R) PRODUCTS.
NO LICENSE, EXPRESS OR IMPLIED, BY ESTOPPEL OR OTHERWISE, TO ANY INTELLECTUAL
PROPERTY RIGHTS IS GRANTED BY THIS DOCUMENT. EXCEPT AS PROVIDED IN INTEL'S
TERMS AND CONDITIONS OF SALE FOR SUCH PRODUCTS, INTEL ASSUMES NO LIABILITY
WHATSOEVER, AND INTEL DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY, RELATING TO
SALE AND/OR USE OF INTEL PRODUCTS INCLUDING LIABILITY OR WARRANTIES RELATING
TO FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR INFRINGEMENT OF ANY
PATENT, COPYRIGHT OR OTHER INTELLECTUAL PROPERTY RIGHT. Intel products are
not intended for use in medical, life saving, life sustaining, critical control
 or safety systems, or in nuclear facility applications.

Intel may make changes to specifications and product descriptions at any time,
without notice.

(C) Intel Corporation 2021 - 2022

* Other names and brands may be claimed as the property of others.

===============================================================================

